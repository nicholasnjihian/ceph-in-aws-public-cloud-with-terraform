# VPC
resource "aws_vpc" "vpc" {
  cidr_block           = var.cidr_block
  enable_dns_hostnames = true
  enable_dns_support   = true
}

resource "aws_security_group" "ssh_access" {
        name        = "ssh_access"
        description = "ssh access"
        vpc_id      = "aws_vpc.vpc.id"

        ingress {
                from_port   = 22
                to_port     = 22
                protocol    = "tcp"
                cidr_blocks = ["196.216.86.75/32"]
        }
}

resource "aws_security_group" "allow_http" {
        name = "Allow HTTP"
        description = "Allow HTTP access for installation of packages and updates"
        vpc_id = "aws_vpc.vpc.id"

        egress {
                from_port   = 80
                to_port     = 22
                protocol    = "tcp"
                cidr_blocks = ["0.0.0.0/0"]
                ipv6_cidr_blocks = ["::/0"]
        }
}

resource "aws_security_group" "allow_tls" {
        name        = "allow_tls"
        description = "Allow TLS outbound traffic"
        vpc_id      = aws_vpc.vpc.id

        egress {
                from_port        = 443
                to_port          = 443
                protocol         = "tcp"
                cidr_blocks      = ["0.0.0.0/0"]
                ipv6_cidr_blocks = ["::/0"]
        }
        tags = {
               Name = "allow_tls"
        }
}

resource "aws_security_group" "allow_ping" {
        name        = "allow icmp traffic"
        description = "Allow ICMP traffic."
        vpc_id      = aws_vpc.vpc.id
        ingress {
                 description      = "Allow ping from 196.216.86.75"
                 from_port        = 8
                 to_port          = 0
                 protocol         = "icmp"
                 cidr_blocks      = ["196.216.86.75/32"]
        }
}

#Create an Elastic IP
resource "aws_eip" "mon1-eip" {
  vpc = true
}
resource "aws_eip" "mon2-eip" {
  vpc = true
}
resource "aws_eip" "mon3-eip" {
  vpc = true
}
resource "aws_eip" "osd1-eip" {
  vpc = true
}
resource "aws_eip" "osd2-eip" {
  vpc = true
}
resource "aws_eip" "osd3-eip" {
  vpc = true
}



#Associate EIP with EC2 Instance

resource "aws_eip_association" "mon1-eip-association" {
  instance_id   = var.aws_instance_mon1_id
  allocation_id = aws_eip.mon1-eip.id
}
resource "aws_eip_association" "mon2-eip-association" {
  instance_id   = var.aws_instance_mon2_id
  allocation_id = aws_eip.mon2-eip.id
}
resource "aws_eip_association" "mon3-eip-association" {
  instance_id   = var.aws_instance_mon3_id
  allocation_id = aws_eip.mon3-eip.id
}
resource "aws_eip_association" "osd1-eip-association" {
  instance_id   = var.aws_instance_osd1_id
  allocation_id = aws_eip.osd1-eip.id
}
resource "aws_eip_association" "osd2-eip-association" {
  instance_id   = var.aws_instance_osd2_id
  allocation_id = aws_eip.osd2-eip.id
}
resource "aws_eip_association" "osd3-eip-association" {
  instance_id   = var.aws_instance_osd3_id
  allocation_id = aws_eip.osd3-eip.id
}


# Internet Gateway for Public Subnet
resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.vpc.id
}


# Public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = var.public_subnet_cidr_block
  availability_zone       = var.subnet_availability_zone
  map_public_ip_on_launch = true
}


# Private Subnet
resource "aws_subnet" "private_subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = var.private_subnet_cidr_block
  availability_zone       = var.subnet_availability_zone
  map_public_ip_on_launch = false
}


# Routing tables to route traffic for Private Subnet
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.vpc.id
}


# Routing tables to route traffic for Public Subnet
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.vpc.id
}


# Route for Internet Gateway
resource "aws_route" "public_internet_gateway" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.internet_gateway.id
}
